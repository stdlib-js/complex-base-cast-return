{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable valid-typeof */\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar T = 'number';\n\n\n// FUNCTIONS //\n\n/**\n* Wraps a function and casts a function's return value to a complex number.\n*\n* ## Notes\n*\n* -   The returned function **assumes** that the wrapped function returns either a real or complex number.\n* -   The returned function **assumes** that, if a return value is non-numeric (i.e., not of type `number`), then the return value is a complex number. The returned function does **not** verify that non-numeric return values are, in fact, complex number objects. The returned function returns non-numeric return values from the wrapped function without modification.\n*\n* @param {Function} fcn - function to wrap\n* @param {NonNegativeInteger} nargs - number of arguments\n* @param {Function} ctor - complex number constructor\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a constructor function\n* @returns {Function} wrapped function\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import addf from '@stdlib/math-base-ops-addf';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var f = wrap( addf, 2, Complex64 );\n*\n* // ...\n*\n* var z = f( 3.0, 4.0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 7.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*/\nfunction wrap( fcn, nargs, ctor ) {\n\tvar fcns;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'null3p', fcn ) );\n\t}\n\tif ( !isNonNegativeInteger( nargs ) ) {\n\t\tthrow new TypeError( format( 'null3k', nargs ) );\n\t}\n\tif ( !isFunction( ctor ) ) {\n\t\tthrow new TypeError( format( 'null3q', ctor ) );\n\t}\n\tfcns = [ fcn0, fcn1, fcn2, fcn3, fcn4, fcn5 ];\n\treturn ( nargs <= 5 ) ? fcns[ nargs ] : fcnN;\n\n\t/**\n\t* Invokes a nullary function and returns a complex number.\n\t*\n\t* @private\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn0() {\n\t\tvar r = fcn();\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a unary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn1( x ) {\n\t\tvar r = fcn( x );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a binary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn2( x, y ) {\n\t\tvar r = fcn( x, y );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a ternary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {*} z - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn3( x, y, z ) {\n\t\tvar r = fcn( x, y, z );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a quaternary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {*} z - input value\n\t* @param {*} w - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn4( x, y, z, w ) {\n\t\tvar r = fcn( x, y, z, w );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a quinary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {*} z - input value\n\t* @param {*} w - input value\n\t* @param {*} v - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn5( x, y, z, w, v ) {\n\t\tvar r = fcn( x, y, z, w, v );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a function and returns a complex number.\n\t*\n\t* @private\n\t* @param {...*} args - input values\n\t* @returns {Complex} result\n\t*/\n\tfunction fcnN() {\n\t\tvar args;\n\t\tvar r;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\tr = fcn.apply( null, args );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrap;\n"],"names":["T","wrap","fcn","nargs","ctor","isFunction","TypeError","format","isNonNegativeInteger","r","x","y","z","w","v","args","i","arguments","length","push","apply"],"mappings":";;uSA+BA,IAAIA,EAAI,SAwCR,SAASC,EAAMC,EAAKC,EAAOC,GAE1B,IAAMC,EAAYH,GACjB,MAAM,IAAII,UAAWC,EAAQ,SAAUL,IAExC,IAAMM,EAAsBL,GAC3B,MAAM,IAAIG,UAAWC,EAAQ,SAAUJ,IAExC,IAAME,EAAYD,GACjB,MAAM,IAAIE,UAAWC,EAAQ,SAAUH,IAGxC,OAASD,GAAS,EADX,CASP,WACC,IAAIM,EAAIP,IACR,UAAYO,IAAMT,EACjB,OAAO,IAAII,EAAMK,EAAG,GAErB,OAAOA,CACP,EASD,SAAeC,GACd,IAAID,EAAIP,EAAKQ,GACb,UAAYD,IAAMT,EACjB,OAAO,IAAII,EAAMK,EAAG,GAErB,OAAOA,CACP,EAUD,SAAeC,EAAGC,GACjB,IAAIF,EAAIP,EAAKQ,EAAGC,GAChB,UAAYF,IAAMT,EACjB,OAAO,IAAII,EAAMK,EAAG,GAErB,OAAOA,CACP,EAWD,SAAeC,EAAGC,EAAGC,GACpB,IAAIH,EAAIP,EAAKQ,EAAGC,EAAGC,GACnB,UAAYH,IAAMT,EACjB,OAAO,IAAII,EAAMK,EAAG,GAErB,OAAOA,CACP,EAYD,SAAeC,EAAGC,EAAGC,EAAGC,GACvB,IAAIJ,EAAIP,EAAKQ,EAAGC,EAAGC,EAAGC,GACtB,UAAYJ,IAAMT,EACjB,OAAO,IAAII,EAAMK,EAAG,GAErB,OAAOA,CACP,EAaD,SAAeC,EAAGC,EAAGC,EAAGC,EAAGC,GAC1B,IAAIL,EAAIP,EAAKQ,EAAGC,EAAGC,EAAGC,EAAGC,GACzB,UAAYL,IAAMT,EACjB,OAAO,IAAII,EAAMK,EAAG,GAErB,OAAOA,CACP,GAnG6BN,GA4G9B,WACC,IAAIY,EACAN,EACAO,EAGJ,IADAD,EAAO,GACDC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAClCD,EAAKI,KAAMF,UAAWD,IAGvB,UADAP,EAAIP,EAAIkB,MAAO,KAAML,MACHf,EACjB,OAAO,IAAII,EAAMK,EAAG,GAErB,OAAOA,CACP,CACF"}